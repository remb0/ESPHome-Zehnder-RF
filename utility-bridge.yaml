substitutions:
  name: "ventilation"
  friendly_name: Ventilation

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: arduino

button:
  - platform: restart
    id: ${name}_esphome_restart
    name: ${friendly_name} restart

  - platform: template
    id: ${name}_high_10
    name: ${friendly_name} High for 10 min
    on_press:
      then:
        lambda: |-
          zehnder_fan->setSpeed(3, 10);

  - platform: template
    id: ${name}_high_30
    name: ${friendly_name} High for 30 min
    on_press:
      then:
        lambda: |-
          zehnder_fan->setSpeed(3, 30);
  
  - platform: template
    id: ${name}_stop
    name: ${friendly_name} Stop
    on_press:
      then:
        lambda: |-
          zehnder_fan->setSpeed(1);

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Amsterdam

external_components:
  - source: github://remb0/ESPHome-Zehnder-RF

# SPI
spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12
  # mosi_pin: GPIO23
  # miso_pin: GPIO19

# nRF905 config
nrf905:
  id: "nrf905_rf"
  cs_pin: GPIO15
  cd_pin: GPIO33
  ce_pin: GPIO27
  pwr_pin: GPIO26
  txen_pin: GPIO25
  # We don't need AM and DR at the moment as they are read from the inernal registers
  am_pin: GPIO32
  dr_pin: GPIO35

# The FAN controller
fan:
  - platform: zehnder
    id: zehnder_fan
    name: "Ventilation"
    nrf905: nrf905_rf
    update_interval: "60s"

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption: 
    key: !secret ventilation_api_key
  
  services:
    - service: set_speed
      variables:
        run_speed: int
        run_time: int
      then:
        - lambda: |-
            zehnder_fan->setSpeed(run_speed, run_time);


ota:
  password: !secret ota_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "LOLIN32-Wifi Fallback Hotspot"
    password: !secret wifi_fallback


# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:
